# Avalible Plugins for planner in ROS2 Foxy
# - NavFn Planner (nav2_navfn_planner/NavfnPlanner)
# - SmacPlanner (smac_planner/SmacPlanner)
# - SmacPlanner2D (smac_planner/SmacPlanner2D)
# 

planner_server:
  ros__parameters:
    expected_planner_frequency: 10.0
    use_sim_time: False
    planner_plugins: ["GridBased"]  # List of mapped plugin names for parameters and processing requests. Each plugin namespace defined in this list needs to have a plugin parameter defining the type of plugin to be loaded in the namespace, in the following way:
    # GridBased:
    #   plugin: "nav2_navfn_planner/NavfnPlanner"
    #   tolerance: 0.5                # Tolerance in meters between the goal pose and the end of the path.
    #   use_astar: false              # Whether to use A*. If false, use Dijkstraâ€™s expansion.
    #   allow_unknown: true           # Whether to allow planning in an unknown space.
    
    # GridBased:
    #   plugin: "nav2_theta_star_planner::ThetaStarPlanner" # In Iron and older versions, "/" was used instead of "::"
    #   how_many_corners: 8
    #   w_euc_cost: 1.0
    #   w_traversal_cost: 2.0
    #   w_heuristic_cost: 1.0
    GridBased:
      plugin: "smac_planner/SmacPlanner"
      tolerance: 0.5                    # tolerance for planning if unable to reach exact pose, in meters, for 2D node
      downsample_costmap: false         # whether or not to downsample the map
      downsampling_factor: 1            # multiplier for the resolution of the costmap layer (e.g. 2 on a 5cm costmap would be 10cm)
      allow_unknown: false              # allow traveling in unknown space
      max_iterations: -1                # maximum total iterations to search for before failing
      max_on_approach_iterations: 1000  # maximum number of iterations to attempt to reach goal once in tolerance, 2D only
      max_planning_time_ms: 2000.0      # max time in ms for planner to plan, smooth, and upsample. Will scale maximum smoothing and upsampling times based on remaining time after planning.
      smooth_path: false                # Whether to smooth searched path
      motion_model_for_search: "DUBIN"  # 2D Moore, Von Neumann; SE2 Dubin, Redds-Shepp
      angle_quantization_bins: 72       # For SE2 node: Number of angle bins for search, must be 1 for 2D node (no angle search)
      minimum_turning_radius: 0.20      # For SE2 node & smoother: minimum turning radius in m of path / vehicle
      reverse_penalty: 2.1              # For Reeds-Shepp model: penalty to apply if motion is reversing, must be => 1
      change_penalty: 0.20              # For SE2 node: penalty to apply if motion is changing directions, must be >= 0
      non_straight_penalty: 1.05        # For SE2 node: penalty to apply if motion is non-straight, must be => 1
      cost_penalty: 1.3                 # For SE2 node: penalty to apply to higher cost zones

      smoother:
        smoother:
          w_curve: 30.0                 # weight to minimize curvature of path
          w_dist: 0.0                   # weight to bind path to original as optional replacement for cost weight
          w_smooth: 30000.0             # weight to maximize smoothness of path
          w_cost: 0.025                 # weight to steer robot away from collision and cost
          cost_scaling_factor: 10.0     # this should match the inflation layer's parameter

        # I do not recommend users mess with this unless they're doing production tuning
        optimizer:
          max_time: 0.10                # maximum compute time for smoother
          max_iterations: 500           # max iterations of smoother
          debug_optimizer: false        # print debug info
          gradient_tol: 1.0e-10
          fn_tol: 1.0e-20
          param_tol: 1.0e-15
          advanced:
            min_line_search_step_size: 1.0e-20
            max_num_line_search_step_size_iterations: 50
            line_search_sufficient_function_decrease: 1.0e-20
            max_num_line_search_direction_restarts: 10
            max_line_search_step_expansion: 50

global_costmap:
  global_costmap:
    ros__parameters:
      update_frequency: 1.0
      publish_frequency: 1.0
      global_frame: map
      robot_base_frame: base_footprint
      use_sim_time: False
      robot_radius: 0.25
      resolution: 0.05
      track_unknown_space: true
      plugins: ["static_layer", "inflation_layer"] # exclude "obstacle_layer", "voxel_layer", costmap plugin are ordered!!!

      # Static Layer - Adds as obstacles to the Global Costmap any black dot that exists in the static map
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        enabled: True
        map_subscribe_transient_local: True
      
      # Inflation Layer - Adds an inflation to any obstacle in the Global Costmap, as a safe distance to maintain
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        enabled: True
        cost_scaling_factor: 3.0  # Exponential decay factor across the inflation radius.
        inflation_radius: 0.05
      always_send_full_costmap: True

      # Obstacle Layer - Adds to the Global Costmap any object detected by a 2D sensor
      # obstacle_layer: 
      #   plugin: "nav2_costmap_2d::ObstacleLayer"
      #   enabled: True
      #   observation_sources: scan
      #   scan:
      #     topic: /scanner/scan
      #     max_obstacle_height: 2.0
      #     clearing: True
      #     marking: True
      #     data_type: "LaserScan"
      #     raytrace_max_range: 3.0
      #     raytrace_min_range: 0.0
      #     obstacle_max_range: 2.5
      #     obstacle_min_range: 0.0
      #     inf_is_valid: false
      
      # Voxel Layer - Adds to the Global Costmap 3D obstacles from PointCloud data
      # voxel_layer:
      #   plugin: "nav2_costmap_2d::VoxelLayer"
      #   enabled: False
      #   footprint_clearing_enabled: true
      #   max_obstacle_height: 2.0
      #   publish_voxel_map: True
      #   origin_z: 0.0
      #   z_resolution: 0.05
      #   z_voxels: 16
      #   max_obstacle_height: 2.0
      #   unknown_threshold: 15
      #   mark_threshold: 0
      #   observation_sources: pointcloud
      #   combination_method: 1
      #   pointcloud:  # no frame set, uses frame from message
      #     topic: /livox/lidar
      #     max_obstacle_height: 2.0
      #     min_obstacle_height: 0.0
      #     obstacle_max_range: 2.5
      #     obstacle_min_range: 0.0
      #     raytrace_max_range: 3.0
      #     raytrace_min_range: 0.0
      #     clearing: True
      #     marking: True
      #     data_type: "PointCloud2"