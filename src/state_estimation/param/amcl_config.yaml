amcl:
  ros__parameters:
    use_sim_time: False
    alpha1: 0.2
    alpha2: 0.2
    alpha3: 0.2
    alpha4: 0.2
    alpha5: 0.2

    set_initial_pose: false
    initial_pose: 
      x: 0.0
      y: 0.0
      yaw: 0.0
      
    always_reset_initial_pose: false  # Requires that AMCL is provided an initial pose either via topic or initial_pose* parameter (with parameter set_initial_pose: true) when reset. Otherwise, by default AMCL will use the last known pose to initialize.

    global_frame_id: "map"
    base_frame_id: "ego_racecar/base_footprint"
    odom_frame_id: "odom"
    
    map_topic: "/map"
    scan_topic: "/ego_racecar/scan"

    max_particles: 8000
    min_particles: 200

    max_beams: 60             # How many evenly-spaced beams in each scan will be used when updating the filter.
    beam_skip_distance: 0.5
    beam_skip_error_threshold: 0.9
    beam_skip_threshold: 0.3
    do_beamskip: false
    
    laser_likelihood_max_dist: 2.0  # Maximum distance to do obstacle inflation on a map, for use in likelihood_field model.
    laser_max_range: 15.0
    laser_min_range: 0.05
    laser_model_type: "likelihood_field"  # Which model to use, beam, likelihood_field, or likelihood_field_prob (same as likelihood_field but incorporates the beamskip feature, if enabled).
    
    pf_err: 0.05
    pf_z: 0.99

    recovery_alpha_fast: 0.0  # The exponential decay rate for the fast average weight filter is used in deciding when to recover by adding random poses. A good value might be 0.1.
    recovery_alpha_slow: 0.0  # The exponential decay rate for the slow average weight filter is used in deciding when to recover by adding random poses. A good value might be 0.001.
    resample_interval: 1

    # Which model to use, either "differential" (nav2_amcl::DifferentialMotionModel)
    # or "omnidirectional" (nav2_amcl::OmniMotionModel).
    # You should probably use omni models instead of differential drive models if you don't have a diff drive set of kinematics. Omni at least allows for anything, so ackermann is a subset of that (even if imperfect). Adding an ackermann motion model plugin is definitely something that could be done!
    robot_model_type: "omnidirectional"
    
    # Maximum rate (Hz) at which to store the last estimated pose and covariance
    # to the parameter server, in the variables ~initialpose and ~initialcov.
    # This saved pose will be used on subsequent runs to initialize the filter (-1.0 to disable).
    save_pose_rate: 0.5

    tf_broadcast: true
    transform_tolerance: 1.0  # Time with which to post-date the transform that is published, indicating that this transform is valid into the future.
    update_min_a: 0.2         # Translational movement required before performing a filter update.
    update_min_d: 0.25        # The rotational movement is required before performing a filter update.
    
    sigma_hit: 0.2    # The standard deviation for Gaussian model used in z_hit part of the model.
    lambda_short: 0.1 # Exponential decay parameter for z_short part of the model.
    z_hit: 0.5
    z_max: 0.05
    z_rand: 0.5
    z_short: 0.05